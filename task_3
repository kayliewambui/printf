#include "main.h"
#include <stdlib.h>
#include <unistd.h>
#include <stdarg.h>

/**
 * _printf - Custom printf function
 * @format: Format string
 * Return: Number of characters printed (excluding the null byte)
 */
int _printf(const char *format, ...)
{
    va_list args;
    int printed_chars = 0;

    va_start(args, format);
    printed_chars = custom_printf(format, args);
    va_end(args);

    return (printed_chars);
}

/**
 * custom_printf - Custom printf helper function
 * @format: Format string
 * @args: Variable argument list
 * Return: Number of characters printed (excluding the null byte)
 */
int custom_printf(const char *format, va_list args)
{
    int i = 0, printed_chars = 0;
    char *str;

    while (format && format[i])
    {
        if (format[i] != '%')
        {
            putchar(format[i]);
            printed_chars++;
        }
        else if (format[i] == '%' && format[i + 1] != '\0')
        {
            i++;
            switch (format[i])
            {
                case 'u':
                    printed_chars += print_unsigned(va_arg(args, unsigned int));
                    break;
                case 'o':
                    printed_chars += print_octal(va_arg(args, unsigned int));
                    break;
                case 'x':
                    printed_chars += print_hex(va_arg(args, unsigned int), 0);
                    break;
                case 'X':
                    printed_chars += print_hex(va_arg(args, unsigned int), 1);
                    break;
                default:
                    putchar('%');
                    putchar(format[i]);
                    printed_chars += 2;
            }
        }
        i++;
    }
    return (printed_chars);
}

/**
 * print_unsigned - Print an unsigned integer
 * @n: Unsigned integer to print
 * Return: Number of characters printed
 */
int print_unsigned(unsigned int n)
{
    int chars_printed = 0;
    if (n / 10 != 0)
        chars_printed += print_unsigned(n / 10);
    putchar((n % 10) + '0');
    return (chars_printed + 1);
}

/**
 * print_octal - Print an unsigned integer in octal format
 * @n: Unsigned integer to print
 * Return: Number of characters printed
 */
int print_octal(unsigned int n)
{
    int chars_printed = 0;
    if (n / 8 != 0)
        chars_printed += print_octal(n / 8);
    putchar((n % 8) + '0');
    return (chars_printed + 1);
}

/**
 * print_hex - Print an unsigned integer in hexadecimal format
 * @n: Unsigned integer to print
 * @uppercase: Whether to use uppercase letters (1) or not (0)
 * Return: Number of characters printed
 */
int print_hex(unsigned int n, int uppercase)
{
    int chars_printed = 0;
    char hex_chars[16] = "0123456789abcdef";
    if (uppercase)
        hex_chars[10] = 'A' + ('a' - 'A');

    if (n / 16 != 0)
        chars_printed += print_hex(n / 16, uppercase);
    putchar(hex_chars[n % 16]);
    return (chars_printed + 1);
}
